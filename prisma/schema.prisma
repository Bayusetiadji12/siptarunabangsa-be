// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(100)
  email         String    @unique @db.VarChar(100)
  password      String    @db.VarChar(100)
  nis           String    @unique @db.VarChar(30)
  phone         String    @db.VarChar(20)
  gender        Gender
  address       String?   @db.Text
  image         String?   @db.Text
  memberSince   DateTime  @default(now())
  is_admin      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  borrows       Borrow[]

  @@map("users")
}

model Book {
  id          String    @id @default(cuid())
  code        String?   @db.VarChar(50)
  title       String    @db.VarChar(200)
  author      String    @db.VarChar(100)
  publisher   String?   @db.VarChar(100)
  year        Int?
  location    String?   @db.VarChar(20)
  cover       String?   @db.Text
  description String?   @db.Text
  isbn        String?   @unique @db.VarChar(100)
  status      Status    @default(TERSEDIA)
  stock       Int       @default(1)
  source      BookSource @default(PEMBELIAN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // category_id String
  // category    Category  @relation(fields: [category_id], references: [id])
  categories  Category[]  @relation("BookCategories")
  borrows     Borrow[]

  @@map("books")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(100)
  image     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books     Book[]     @relation("BookCategories")

  @@map("categorys")
}

model Borrow {
  id          String       @id @default(cuid())
  user_id     String
  book_id     String
  borrowDate  DateTime     @default(now())
  returnDate  DateTime?
  dueDate     DateTime
  status      BorrowStatus @default(DIPINJAM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [user_id], references: [id])
  book        Book         @relation(fields: [book_id], references: [id])

  @@map("borrows")
}

enum Status {
  TERSEDIA
  DIPINJAM
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum BookSource {
  PEMBELIAN
  SUMBANGAN
}

enum BorrowStatus {
  DIPINJAM
  DIKEMBALIKAN
  TERLAMBAT
  HILANG
}